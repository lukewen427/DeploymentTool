#!/bin/bash
### BEGIN INIT INFO
#
# Provides : eSC engine
# Required-Start : 
# Required-Stop  : 
# Default-Start  : 2 3 4 5
# Default-Stop   : 0 1 6
# Short-Description : e-Science Central workflow engine 3
# Description    : This is a startup script for e-SC workflow engine 
#
### END INIT INFO

# Load Java configuration.
if [ -z "$JAVA_CONF" ]; then
  JAVA_CONF="/etc/java/java.conf"
fi
[ -r "$JAVA_CONF" ] && . "$JAVA_CONF"

# Set defaults.
PROG=esc-engine
STARTUP_WAIT=10
SHUTDOWN_WAIT=30
PIDFILE=/var/run/eSC-engine/${PROG}.pid
LOGFILE="/var/log/eSC-engine/${PROG}.log"
ENGINE_HOME="/usr/local/eSC-engine"
ENGINE_CONF_PATH="/etc/eSC"
ENGINE_USER=esc-engine

# Load engine configuration. Override the defaults.
if [ -z "$INIT_CONF" ]; then
  INIT_CONF="/etc/eSC/engine.conf"
fi
[ -r "$INIT_CONF" ] && . "${INIT_CONF}"

ENGINE_BIN="$ENGINE_HOME/bin/startserver.sh"

start() {
  echo -n "Starting $PROG: "
  if [ -f "$PIDFILE" ]; then
    read ppid < $PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo -n "$PROG is already running "
      # failure
      echo FAIL
      echo
      return 1
    else
      rm -f $PIDFILE
    fi
  fi
  sudo mkdir -p $(dirname $LOGFILE)
  sudo cat /dev/null > $LOGFILE

  sudo mkdir -p $(dirname $PIDFILE)
  sudo chown $ENGINE_USER $(dirname $PIDFILE) || true

  if [ -r "$ENGINE_CONF_PATH/engine.xml" ]; then
    ENGINE_CONFIG="-c $ENGINE_CONF_PATH"
  fi

  su - $ENGINE_USER -c "PIDFILE=$PIDFILE $ENGINE_BIN $ENGINE_DEBUG $ENGINE_CONFIG" > $LOGFILE 2>&1 &

  count=0
  launched=false
  attached=false

  until [ $count -gt $STARTUP_WAIT ]
  do
    grep 'Notifying engine startup for ID:' $LOGFILE > /dev/null
    if [ $? -eq 0 ] ; then
      launched=true
    fi
    grep 'JMS Attached:' $LOGFILE > /dev/null
    if [ $? -eq 0 ] ; then
      attached=true
      break
    fi
    sleep 1
    let count=$count+1;
  done

  if $launched && $attached ; then
    # success
    echo OK
  elif $launched ; then
    # warning
    echo WARN
  else
    # failure
    echo FAIL
  fi

  echo
  return 0
}

stop() {
  echo -n "Stopping $PROG: "
  count=0;

  if [ -f $PIDFILE ]; then
    read kpid < $PIDFILE
    let kwait=$SHUTDOWN_WAIT

    # Try issuing SIGTERM first

    kill -15 $kpid
    until [ `ps --pid $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
    do
      sleep 1
      let count=$count+1;
    done

    # If SIGTERM doesn't kill, terminate it with SIGKILL
    if [ $count -gt $kwait ]; then
      kill -9 $kpid
    fi
  fi
  rm -f $PIDFILE
  echo OK
}

status() {
  if [ -f $PIDFILE ]; then
    read ppid < $PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo "$PROG is running (pid $ppid)"
      return 0
    else
      echo "$PROG dead but pid file exists"
      return 1
    fi
  fi
  echo "$PROG is not running"
  return 3
}

case "$1" in
  start)
      start
      ;;
  stop)
      stop
      ;;
  restart)
      stop
      start
      ;;
  status)
      status
      ;;
  *)
      ## If no parameters are given, print which are avaiable.
      echo "Usage: $0 {start|stop|status|restart}"
      exit 1
      ;;
esac

