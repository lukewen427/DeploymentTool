#!/bin/sh
#
# e-Science Central engine control script
#
# chkconfig: - 81 19
# description: e-Science Central engine
# processname: eSC-engine
# pidfile: /var/run/eSC/engine.pid
# config: /etc/eSC/engine.conf

# Source function library.
. /etc/init.d/functions

# Load Java configuration.
[ -r /etc/java/java.conf ] && . /etc/java/java.conf
export JAVA_HOME

# Load engine configuration.
if [ -z "$INIT_CONF" ]; then
  INIT_CONF="/etc/eSC/engine.conf"
fi

[ -r "$INIT_CONF" ] && . "${INIT_CONF}"

# Set defaults.

if [ -z "$STARTUP_WAIT" ]; then
  STARTUP_WAIT=10
fi

if [ -z "$SHUTDOWN_WAIT" ]; then
  SHUTDOWN_WAIT=30
fi

if [ -z "$PIDFILE" ]; then
  PIDFILE=/var/run/eSC/engine.pid
fi
export PIDFILE

if [ -z "$CONSOLE_LOG" ]; then
  CONSOLE_LOG=/var/log/eSC/engine.log
fi

#if [ -z "$ENGINE_CONFIG_PATH" ]; then
#  ENGINE_CONFIG_PATH=/etc/eSC
#fi

ENGINE_SCRIPT=$ENGINE_HOME/bin/startserver.sh

prog='eSC-engine'

CMD_PREFIX=''

if [ ! -z "$ENGINE_USER" ]; then
  if [ -x /etc/rc.d/init.d/functions ]; then
    CMD_PREFIX="daemon --user $ENGINE_USER"
  else
    CMD_PREFIX="su - $ENGINE_USER -c"
  fi
fi

start() {
  echo -n "Starting $prog: "
  if [ -f $PIDFILE ]; then
    read ppid < $PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo -n "$prog is already running"
      failure
      echo
      return 1 
    else
      rm -f $PIDFILE
    fi
  fi
  mkdir -p $(dirname $CONSOLE_LOG)
  cat /dev/null > $CONSOLE_LOG

  mkdir -p $(dirname $PIDFILE)
  chown $ENGINE_USER $(dirname $PIDFILE) || true

  if [ ! -z "$ENGINE_USER" ]; then
    if [ -x /etc/rc.d/init.d/functions ]; then
      # daemon --user $ENGINE_USER PIDFILE=$PIDFILE $ENGINE_SCRIPT -configPath $ENGINE_CONFIG_PATH > $CONSOLE_LOG 2>&1 &
      daemon --user $ENGINE_USER PIDFILE=$PIDFILE $ENGINE_SCRIPT > $CONSOLE_LOG 2>&1 &
    else
      # su - $ENGINE_USER -c "PIDFILE=$PIDFILE $ENGINE_SCRIPT -configPath $ENGINE_CONFIG_PATH" > $CONSOLE_LOG 2>&1 &
      su - $ENGINE_USER -c "PIDFILE=$PIDFILE $ENGINE_SCRIPT" > $CONSOLE_LOG 2>&1 &
    fi
  fi

  count=0
  launched=false
  attached=false

  until [ $count -gt $STARTUP_WAIT ]
  do
    grep 'Notifying engine startup for ID:' $CONSOLE_LOG > /dev/null 
    if [ $? -eq 0 ] ; then
      launched=true
    fi
    grep 'JMS Attached:' $CONSOLE_LOG > /dev/null
    if [ $? -eq 0 ] ; then
      attached=true
      break
    fi
    sleep 1
    let count=$count+1;
  done
  
  if $launched && $attached ; then
    success
  elif $launched ; then
    warning
  else
    failure
  fi

  echo
  return 0
}

stop() {
  echo -n $"Stopping $prog: "
  count=0;

  if [ -f $PIDFILE ]; then
    read kpid < $PIDFILE
    let kwait=$SHUTDOWN_WAIT

    # Try issuing SIGTERM

    kill -15 $kpid
    until [ `ps --pid $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
    do
      sleep 1
      let count=$count+1;
    done

    if [ $count -gt $kwait ]; then
      kill -9 $kpid
    fi
  fi
  rm -f $PIDFILE
  success
  echo
}

status() {
  if [ -f $PIDFILE ]; then
    read ppid < $PIDFILE
    if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
      echo "$prog is running (pid $ppid)"
      return 0
    else
      echo "$prog dead but pid file exists"
      return 1
    fi
  fi
  echo "$prog is not running"
  return 3
}

case "$1" in
  start)
      start
      ;;
  stop)
      stop
      ;;
  restart)
      $0 stop
      $0 start
      ;;
  status)
      status
      ;;
  *)
      ## If no parameters are given, print which are avaiable.
      echo "Usage: $0 {start|stop|status|restart|reload}"
      exit 1
      ;;
esac
